---
format: 
  html:
    df-print: kable
    code-fold: true
editor: source
editor_options: 
  chunk_output_type: console
---

```{r}
# setwd("/home/agricolamz/work/materials/2024.04.20_epigraphy/cleaned")
suppressPackageStartupMessages(library(tidyverse))
theme_set(theme_minimal() + theme(text = element_text(size = 16), legend.position = "bottom"))
library(infotheo)
library(tidytext)

df <- readxl::read_xlsx("full_dataset.xlsx")

df |> 
  distinct(code, region) |> 
  count(region) ->
  tombs
```

Мы анализируем `r nrow(df)` имени, обнаруженные на `r tombs$n[1]` ашкеназских и `r tombs$n[2]` горско-еврейских надгробиях в `r length(unique(df$place))` кладбищах. Надгробия охватывают временной промежуток c `{r} min(df$year)` по `{r} max(df$year)` года. В исследовании исследовались только те надгробия, на которых сохранились хотя бы одно из имен (покойного/покойной или его отца) и год смерти. Причем в анализе использовались и имя покойного/покойной, и имя его/ее отца, в связи с этим мужских имен в датасете больше, чем женских:

```{r}
df |> 
  count(gender)
```

Кроме того, женские надгробия встречаются значительно реже в Дагестане:

```{r}
df |> 
  count(region, gender) |> 
  pivot_wider(names_from = region, values_from = n)
```

Вот как надгробия распределены по времени

```{r}
df |> 
  mutate(gender = factor(gender, levels = c("m", "f"))) |> 
  ggplot(aes(year, fill = gender))+
  geom_histogram(bins = 30, position = "identity")+
  facet_wrap(~region, nrow = 2, scales = "free_y")+
  labs(x = NULL, y = NULL, fill = NULL)+
  scale_fill_manual(values = c("#009E73", "#E69F00"))
```

Для оценки разнообразия имен мы использовали меру скользящей энтропии:

```{r}
window <- 15

min_year <- min(df$year, na.rm = TRUE)
max_year <- max(df$year, na.rm = TRUE)-window
map_dfr(seq(from = min_year, to = max_year), function(j){
  df |>
    filter(year >= j,
           year < j+window) |> 
    group_by(region) |> 
    summarise(entropy_value = entropy(name)) |> 
    mutate(year = j)
  }) ->
  entropy_overall

entropy_overall |> 
  ggplot(aes(year, entropy_value))+
  geom_line()+
  facet_wrap(~region, nrow = 2)+
  labs(x = NULL, y = "значение скользящей энтропии",
       caption = str_glue("используется окно в {window} лет"))
```

По графикам видно, что на ашкеназские общины война повлияла значительно сильнее, чем на горско-еврейские. Однако дьявол в деталях: как устроены эти графики по индивидуальным населенным пунктам?

```{r}
#| fig-height: 11
df |> 
  ggplot(aes(year))+
  geom_histogram(bins = 30)+
  facet_wrap(~region+place, scales = "free", ncol = 3)

map_dfr(seq(from = min_year, to = max_year), function(j){
  df |>
    filter(year >= j,
           year < j+window) |>
    group_by(region, place) |> 
    summarise(entropy_value = entropy(name), .groups = "keep") |> 
    mutate(year = j)
  }) ->
  entropy_by_place

entropy_by_place |> 
  ggplot(aes(year, entropy_value))+
  geom_line()+
  facet_wrap(~region+place, scales = "free", ncol = 3)+
  labs(x = NULL, y = "значение скользящей энтропии",
       caption = str_glue("используется окно в {window} лет"))
```

Сравним топ 25 мужских и женских имен по частотности:

```{r}
df |> 
  filter(gender == "m") |> 
  count(name, region) |> 
  group_by(region) |> 
  slice_max(order_by = n, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL)

df |> 
  filter(gender == "f") |> 
  count(name, region) |> 
  group_by(region) |> 
  slice_max(order_by = n, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL)

df |> 
  distinct(name) |> 
  nrow() ->
  n_names
```

В датасете `r n_names` уникальных имен, сравнивать их частотности сложно, поэтому мы использовали меру tf-idf, которая позволяет выделить имена, которые специфичные для каждой из групп.

```{r}
df |> 
  filter(gender == "m") |>
  count(name, region) |> 
  bind_tf_idf(name, region, n) |> 
  group_by(region) |> 
  slice_max(order_by = tf_idf, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL) 

df |> 
  filter(gender == "f") |>
  count(name, region) |> 
  bind_tf_idf(name, region, n) |> 
  group_by(region) |> 
  slice_max(order_by = tf_idf, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL) 
```

Меру tf-idf можно использовать и для того, чтобы выделить ядро имен общее для обеих групп.

```{r}
df |> 
  filter(gender == "m") |>
  count(name, region) |> 
  bind_tf_idf(name, region, n) |> 
  filter(tf_idf == 0) |> 
  group_by(region) |> 
  slice_max(order_by = n, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL) 

df |> 
  filter(gender == "f") |>
  count(name, region) |> 
  bind_tf_idf(name, region, n) |> 
  filter(tf_idf == 0) |> 
  group_by(region) |> 
  slice_max(order_by = n, n = 25) |> 
  mutate(name = reorder_within(name, within = region, n)) |> 
  ggplot(aes(n, name))+
  geom_col()+
  scale_y_reordered()+
  facet_wrap(~region, scales = "free")+
  labs(x = NULL, y = NULL) 
```



